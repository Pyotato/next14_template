generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")

}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String?
  published   Boolean   @default(false)
  author      User?     @relation(fields: [authorId], references: [id])
  authorId    String?
  comments    Comment[]
  createdAt   DateTime  @default(now())
  publishedAt DateTime?
}

model Comment {
  id              String   @id @default(cuid())
  createdAt       DateTime
  content         String
  postId          String
  parentCommentId String?
  post            Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  commenterId     String
  image           String?
  name            String?
  ref             Int      @default(1)
  step            Int      @default(0)
  refOrder        Int      @default(0)
  answerNum       Int      @default(0)
  commenter       User?    @relation(fields: [commenterId, image, name], references: [id, image, name], onDelete: Cascade)
}

model Prompt {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  name                     String?
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                       String   @id @default(cuid())
  sessionToken             String   @unique @map("session_token")
  userId                   String   @map("user_id")
  expires                  DateTime
  refresh_token_expires_in Int?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                     String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  Comment       Comment[]
  isAdmin       Boolean   @default(false)

  @@unique([id, image, name])
}

model VerificationToken {
  id                       Int      @id @default(autoincrement())
  identifier               String
  token                    String   @unique
  expires                  DateTime
  refresh_token_expires_in Int?
  name                     String?

  @@unique([identifier, token])
}
